import React from 'react'
import {View,Text,StyleSheet, Button,Dimensions,Alert,Pressable} from 'react-native'
import { useState,useEffect } from 'react'
import {BarCodeScanner} from 'expo-barcode-scanner'
import Header from '../../components/header'
import Icon from 'react-native-vector-icons/FontAwesome'
import { useNavigation } from '@react-navigation/native'
import { useRoute } from '@react-navigation/native'

//import * as Location from 'expo-location' 
import firebaseConfig from '../../../firebase'
import firebase from 'firebase/compat'
import 'firebase/compat/firestore'



const db = firebase.firestore();
const deviceWidth = Math.round(Dimensions.get("window").width);

const Scanner = () => {

  const navigation = useNavigation();
    const route = useRoute();
    const{email} = route.params


 const[hasPermission, setHasPermission] = useState(null)
 const[scanned,setScanned] = useState(false)
   const [scannedData, setScannedData] = useState(' ');
 //const[text,setText] = useState('QR Code not scanned yet')

 useEffect(()=> {
    askForPermission();
 },[])
 
const askForPermission = () => {
  (async () => {
      const{status} = await BarCodeScanner.requestPermissionsAsync();
      setHasPermission(status== 'granted')
  })()
}

//when scanning qrcode
const handleQRCodeScanned = async({type,data}) => {
  setScanned(true);
  setScannedData(data)
  console.log(data)
  try{
    const qrCodeData = JSON.parse(data)
 await Verification(qrCodeData.qrCodeJSONString)
  }catch(err){
Alert.alert('Invalid QR','This QR was not generated by app')
  }
  
 }


//to send get request to server side code with params eventId and email
// which are obtained after scanning and based on the response 'Found' and 'Not found' decide whether
//to give entry to a person or not . 
const Verification = async(scannedData) => {
  

  try {
  
    const verifyAttendee = await db.collection('attendees')
                           .where('qrCodeJSONString','==',scannedData)
                           .get()
 /*   verifyAttendee.forEach((doc)=> {
        const str = doc.data().qrCodeJSONString
        console.log(JSON.parse(str))
    }) */
    if(!verifyAttendee.empty)
    {
      const refAttendee = verifyAttendee.docs[0]
      await refAttendee.ref.update({Status:'Scanned'})  
        Alert.alert('Success','Welcome invitee!')
        console.log("fcgvbhn")
    }else 
    {
        Alert.alert('Failed','User does not exist')
    }
  } catch (error) {
      console.error(error);
      Alert.alert("Message from event tracker","There was an error checking ");
  }
}
//check permissions and return screens
if(hasPermission ===null){
    return(
        <View style={styles.container}>
            <Text>Requesting for Camera Permission...</Text>
        </View>
    )
}
if(hasPermission === false)
{
    return (
        <View style={styles.container} >
            <Text style={{margin:10}}>No access to camera</Text>
            <Button title={'Allow Camera'} onPress={() => askForPermission()}/>
        </View>
    )
}

const onPressBack = () => {
  navigation.navigate('mainpage', {email:email})
}

    
return (
        <View style = {styles.container}>
        
          <View style={styles.arrowButton}>
          <Pressable onPress= {onPressBack}>
        <Icon
        name="arrow-left"
        size={20}
        color="#000"
        />
        </Pressable>
        </View>
        <View style={styles.barcodebox}>
<BarCodeScanner 
onBarCodeScanned={scanned?undefined:handleQRCodeScanned}
style={{height:400, width:400 }} />
        </View>
        <Text>{scannedData}</Text>
       {scannedData && (
        <View>
          <Button color="#AF7D7D" borderRadius='10' title="Scan Again" onPress={() => setScanned(false)} />
         
        </View>
      )}
</View>
)}



const styles = StyleSheet.create({
    container: {
        flex:1, 
        backgroundColor:'#F7E5E2',
        alignItems:'center',
        justifyContent:'center',
        
    },
    barcodebox: {
        backgroundColor:'#fff',
        alignItems:'center',
        justifyContent:'center',
        height:300,
        wigth:300,
        overflow:'hidden',
        borderRadius:30,
        backgroundColor:'#AF7D7D'
    },
    buttons: {
    
        color:'#AF7D7D',
        borderRadius:5,
        padding:10,
        marginVertical:10,
        marginBottom:10,
    },
    custHeader: {
      width: deviceWidth,
      height:'3%',
     // backgroundColor:"#bfc2cc",
     backgroundColor:'white',
      justifyContent:'flex-end', //vertical align
      alignItems:'center', //horizontal alignment
     paddingBottom:10
  },
  arrowButton: {
    position:'absolute',
          top:40,
          left:20,
        zIndex:1,}
  
})

export default Scanner 
